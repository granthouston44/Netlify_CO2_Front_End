{"remainingRequest":"/Users/granthouston/Documents/codeclan_work/week_08/day_4/CO2_Footprint_Calculator/CO2_Footprint_Calculator/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/granthouston/Documents/codeclan_work/week_08/day_4/CO2_Footprint_Calculator/CO2_Footprint_Calculator/client/src/components/Result.vue?vue&type=style&index=0&id=6c2dd066&lang=css&scoped=true&","dependencies":[{"path":"/Users/granthouston/Documents/codeclan_work/week_08/day_4/CO2_Footprint_Calculator/CO2_Footprint_Calculator/client/src/components/Result.vue","mtime":1579263691462},{"path":"/Users/granthouston/Documents/codeclan_work/week_08/day_4/CO2_Footprint_Calculator/CO2_Footprint_Calculator/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/granthouston/Documents/codeclan_work/week_08/day_4/CO2_Footprint_Calculator/CO2_Footprint_Calculator/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/granthouston/Documents/codeclan_work/week_08/day_4/CO2_Footprint_Calculator/CO2_Footprint_Calculator/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/granthouston/Documents/codeclan_work/week_08/day_4/CO2_Footprint_Calculator/CO2_Footprint_Calculator/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/granthouston/Documents/codeclan_work/week_08/day_4/CO2_Footprint_Calculator/CO2_Footprint_Calculator/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmRpdiB7CiAgLyogYmFja2dyb3VuZC1jb2xvcjogbGlnaHRzbGF0ZWdyZXk7ICovCiAgcGFkZGluZzogMjBweDsKICBtYXJnaW46IDEwcHg7CiAgYWxpZ24tY29udGVudDogZmxleC1lbmQ7Cgp9CgouY2hhcnRzewogIGRpc3BsYXk6IGlubGluZS1mbGV4Owp9Cg=="},{"version":3,"sources":["Result.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoLA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA","file":"Result.vue","sourceRoot":"src/components","sourcesContent":["<template lang=\"html\">\n  <div >\n    <div class=\"charts\">\n      <highcharts v-if=\"chartOptions.series[0].data.length > 0\" :options=\"chartOptions\"/>\n    </div>\n    <div class=\"dropdown\">\n      <date-history :footprints=\"footprints\" />\n    </div>\n  </div>\n  </template>\n\n  <script>\n  import UserDataService from '@/services/UserDataService.js'\n  import {eventBus} from '@/main.js'\n  import {Chart} from 'highcharts-vue'\n  import Highcharts from 'highcharts'\n  import drilldown from 'highcharts/modules/drilldown'\n  import DateHistory from './DateHistory';\n\n  drilldown(Highcharts)\n  export default {\n\n    data(){\n      return{\n        footprints: [],\n        chartOptions:{\n          chart: {\n            type: 'pie'\n          },\n          title: {\n\n          },\n          subtitle: {\n            text: 'Click the slices to view a breakdown of your footprint'\n          },\n\n          accessibility: {\n            announceNewData: {\n              enabled: true\n            },\n            point: {\n              valueSuffix: '%'\n            }\n          },\n\n          plotOptions: {\n            series: {\n              dataLabels: {\n                enabled: true,\n                format: '{point.name}: {point.y:.1f}%'\n              }\n            }\n          },\n\n          tooltip: {\n            headerFormat: '<span style=\"font-size:11px\">{series.name}</span><br>',\n            pointFormat: '<span style=\"color:{point.color}\">{point.name}</span>: <b>{point.y:.2f}%</b> of Total Footprint<br/>'\n          },\n\n          series: [\n            {\n              name: \"Footprint\",\n              colorByPoint: true,\n              data: [\n\n              ]\n            }\n          ],\n          drilldown: {\n            series: [\n\n            ]\n          }\n        }\n\n      }\n    },\n    components:{\n      highcharts: Chart,\n      'date-history': DateHistory\n    },\n    methods: {\n      percentage(footprint){\n        let travelPercentage = (footprint.travelTotal / footprint.combinedTotal) * 100\n        let energyPercentage = (footprint.energyTotal /footprint.combinedTotal) * 100\n        let dietPercentage = (footprint.dietTotal / footprint.combinedTotal) * 100\n\n        //drilldown\n        let travelDrillCar = (footprint.car / footprint.travelTotal) * 100\n        let travelDrillTrain = (footprint.train / footprint.travelTotal) * 100\n        let travelDrillPlane = (footprint.plane / footprint.travelTotal) * 100\n\n        let energyDrillElectricity = (footprint.electricity / footprint.energyTotal) * 100\n        let energyDrillGas = (footprint.gas / footprint.energyTotal) * 100\n        let energyDrillHybrid = (footprint.hybrid / footprint.energyTotal) * 100\n\n        let dietDrillMeat = (footprint.meat / footprint.dietTotal) * 100\n        let dietDrillVeg = (footprint.veg / footprint.dietTotal) * 100\n\n\n\n        this.chartOptions.series[0].data.push({\n          name: \"Travel\",\n          y: travelPercentage,\n          drilldown: \"Travel\"\n        })\n        this.chartOptions.series[0].data.push({\n          name: \"Energy\",\n          y: energyPercentage,\n          drilldown: \"Energy\"\n        })\n        this.chartOptions.series[0].data.push({\n          name: \"Diet\",\n          y: dietPercentage,\n          drilldown: \"Diet\"\n        })\n\n        this.chartOptions.drilldown.series.push(\n          {\n            name: \"Travel\",\n            id: \"Travel\",\n            data: [\n              [\"Car\",\n              travelDrillCar\n            ],\n            [\"Train\",\n            travelDrillTrain],\n            [\"Plane\",\n            travelDrillPlane]\n          ]\n        },\n        {\n          name: \"Energy\",\n          id: \"Energy\",\n          data: [\n            [\"Electricity\",\n            energyDrillElectricity\n          ],\n          [\"Gas\",\n          energyDrillGas],\n          [\"Hybrid\",\n          energyDrillHybrid]\n        ]\n      },\n      {\n        name: \"Diet\",\n        id: \"Diet\",\n        data: [\n          [\"Meat\",\n          dietDrillMeat\n        ],\n        [\"Veg\",\n        dietDrillVeg]\n      ]\n    }\n  )\n\n}\n},\nmounted(){\n  UserDataService.getUserData()\n  .then(footprints => this.footprints = footprints)\n\n\n\n  eventBus.$on('footprint-added', (footprint)=> {\n    this.footprints.push(footprint)\n    this.chartOptions.series[0].data.length = 0\n    this.chartOptions.title = {text: `CO2 Footprint for ${footprint.date}`}\n    this.percentage(footprint)\n\n  })\n\n}\n}\n\n\n</script>\n\n<style lang=\"css\" scoped>\n.div {\n  /* background-color: lightslategrey; */\n  padding: 20px;\n  margin: 10px;\n  align-content: flex-end;\n\n}\n\n.charts{\n  display: inline-flex;\n}\n</style>\n"]}]}